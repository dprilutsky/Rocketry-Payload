#include <Adafruit_Sensor_Set.h>
#include <Adafruit_Simple_AHRS.h>
#include <Madgwick.h>
#include <Mahony.h>
#include <Wire.h>
#include <SPI.h>
#include <TinyGPS.h> // GPS
#include <Adafruit_LSM9DS0.h> //accelerometer
#include <Adafruit_MPL3115A2.h> //barometer
#include <Adafruit_Sensor.h>  // not used in this demo but required!
#include <Adafruit_Simple_AHRS.h>
#include <SoftwareSerial.h>
#include <SD.h>
#include <SD_t3.h>

// Use I2C, ID #1000
Adafruit_LSM9DS0 lsm = Adafruit_LSM9DS0(1000); 
Adafruit_MPL3115A2 bar = Adafruit_MPL3115A2();
TinyGPS gps;
//Create simple AHRS algorithm using the LSMD9S0 instance's accelerometer and magnetometer
Adafruit_Simple_AHRS ahrs(&lsm.getAccel(), &lsm.getMag());
//Data array
float data[13];
//SD Card
File myFile;
//XBee
int led = 13;

String gpsData(TinyGPS &gps1);
String printFloat(double f, int digits = 2);

SoftwareSerial XBee(27, 26);
/*
 * Data Key:
 * 0: X acceleration (m/s^2) *
 * 1: Y acceleration (m/s^2) *
 * 2: Z acceleration (m/s^2) *
 * 3: X mag (gauss)
 * 4: Y mag (gauss)
 * 5: Z mag (gauss)
 * 6: Roll (degrees) *
 * 7: Pitch (degrees) *
 * 8: Heading (degrees) *
 * 9: Temperature (C) (from LSM9DS0)
 * 10: Pressure (Pascals)
 * 11: Altitude (m) *
 * 12: Temperature (C) (from MPL3115A2)
 * From GPS (not in array):
 * 13: Altitude (m) (From GPS) *
 * 14: Speed (m/s) *
 * 15: Latitude *
 * 16: Longitude *
 * 17: Fixage Time (ms since GPS data was encoded)
 * 18: Year
 * 19: Month  
 * 20: Day
 * 21: Hour
 * 22: Minute
 * 23: millis() *
 */
void setupSensor()
{
  // 1.) Set the accelerometer range
  //lsm.setupAccel(lsm.LSM9DS0_ACCELRANGE_2G);
  //lsm.setupAccel(lsm.LSM9DS0_ACCELRANGE_4G);
  //lsm.setupAccel(lsm.LSM9DS0_ACCELRANGE_6G);
  //lsm.setupAccel(lsm.LSM9DS0_ACCELRANGE_8G);
  lsm.setupAccel(lsm.LSM9DS0_ACCELRANGE_16G);
  
  // 2.) Set the magnetometer sensitivity
  lsm.setupMag(lsm.LSM9DS0_MAGGAIN_2GAUSS);
  //lsm.setupMag(lsm.LSM9DS0_MAGGAIN_4GAUSS);
  //lsm.setupMag(lsm.LSM9DS0_MAGGAIN_8GAUSS);
  //lsm.setupMag(lsm.LSM9DS0_MAGGAIN_12GAUSS);
  // 3.) Setup the gyroscope
  lsm.setupGyro(lsm.LSM9DS0_GYROSCALE_245DPS);
  //lsm.setupGyro(lsm.LSM9DS0_GYROSCALE_500DPS);
  //lsm.setupGyro(lsm.LSM9DS0_GYROSCALE_2000DPS);
}
void setup() 
{
#ifndef ESP8266
  while (!Serial);     // will pause Zero, Leonardo, etc until serial console opens
#endif
  Serial.begin(9600);
  
  // Try to initialise and warn if we couldn't detect the chip
  if (!lsm.begin())
  {
    Serial.println("Unable to initialize the accelerometer.");
    while (1);
  }
  if (!bar.begin()) {
    Serial.println("Unable to initialize the barometer.");
    return;
  }
  Serial.println("Found Sensors");
  Serial.println("");
  Serial.println("");
  //Setup the sensor gain and integration time.
  setupSensor();
  //XBee
  XBee.begin(9600);
  pinMode(led, OUTPUT);
}
//XBee
int numberPackets = 0;
void loop() 
{
  sensors_vec_t orientation;
  sensors_event_t accel, mag, gyro, temp;
  lsm.getEvent(&accel, &mag, &gyro, &temp);
  
  data[0] = accel.acceleration.x;
  data[1] = accel.acceleration.y;
  data[2] = accel.acceleration.z;
  data[3] = mag.magnetic.x;
  data[4] = mag.magnetic.y;
  data[5] = mag.magnetic.z;
  if (ahrs.getOrientation(&orientation))
  {
    /* 'orientation' should have valid .roll and .pitch fields */
    data[6] = orientation.roll;
    data[7] = orientation.pitch;
    data[8] = orientation.heading;
  }
  data[9] = temp.temperature;
  data[10] = bar.getPressure();
  data[11] = bar.getAltitude();
  data[12] = bar.getTemperature();
  
  /*float flat, flon, fix_age;
  unsigned long age;
  int year;
  byte month,day, hour,minute, second;
  data[15] = (float)gps.f_get_position(&flat, &flon, &age);
  data[16] = gps.crack_datetime(&year);
  data[17] = gps.crack_datetime(&month);
  data[18] = gps.crack_datetime(&day);
  data[19] = gps.crack_datetime(&hour);
  data[20] = gps.crack_datetime(&minute);
  data[21] = gps.crack_datetime(&second);*/
  String message = "*#" + (String)data[0] + "#,#" + (String)data[1] + "#,#" + (String)data[2] + "#,#" + (String)data[6] + "#,#" + (String)data[7] + "#,#" + (String)data[8] + "#,#" + (String)data[11] + "#,#";
 
  message += gpsData(gps);

  message += (String)(millis()/1000.0) + "#&";

  Serial.println(message);


  
  //SD Card (filename.txt will be data file):
  String sdmessage = "*#";
  for (int i = 0; i < 12; i++) {
    sdmessage += (String)data[i] + "#,#";
  }
  sdmessage += gpsData(gps);
  sdmessage += (String)(millis()/1000.0) + "#&";
  
  myFile = SD.open("filename.txt", FILE_WRITE);

  if (myFile) {
    myFile.println(sdmessage);
    myFile.close();
  } else {
    Serial.println("SD card error");
  }


  
  //XBee
  
  // put your main code here, to run repeatedly:
  //digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  //if (XBee.available() > 0) {
    //message = XBee.read();
    digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
    //In message, we will put the string we are going to send (the same one that went to the SD card) - or can the XBee send an array?
    //Is it possible to do XBee.write(Serial.read()) ?
    //message = String("\nTestPacket Number: ").concat(String(numberPackets).concat(String(" || Time of packet send: ").concat(millis()))); // + numberPackets + " || Time of packet send: " + millis());
    char charArray[128];
    message.toCharArray(charArray, message.length() + 2);
    XBee.write(charArray);
    
   
    //digitalWrite(led, LOW);   // turn the LED on (HIGH is the voltage level)
  //}
  /*
  for(int i = 0; i < 13; i++)
  {
    Serial.print(data[i]);
    Serial.print(" ");
  }
  Serial.println();
  */ 
  delay(1);
}

String gpsData(TinyGPS &gps1)
{
  String data = "";
  long lat, lon;
  float flat, flon;
  unsigned long age, date, time, chars;
  int year;
  byte month, day, hour, minute, second, hundredths;
  unsigned short sentences, failed;
  gps.get_position(&lat, &lon, &age);

  data += (String)(gps1.altitude()*100) + "#,#" + printFloat(gps1.f_speed_mps()) + "#,#" + (String)lat + "#,#" + (String)lon + "#,#";
  
  return data;
}

String printFloat(double number, int digits)
{
  String toReturn = "";
  // Handle negative numbers
  if (number < 0.0) {
     toReturn = "-";
     number = -number;
  }
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  toReturn += (String)int_part;
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    toReturn += ".";
  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
    int toPrint = int(remainder);
    toReturn += (String)toPrint;
    remainder -= toPrint;
  }

  return toReturn;
}
